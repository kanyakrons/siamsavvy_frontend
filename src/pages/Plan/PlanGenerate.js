import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Select from "react-select";
import { getPlaces, getProvinces } from "../../api/placeApi";
import { getCategories } from "../../api/categoryApi";
import { generatePlanByAi, CreatePlan } from "../../api/planApi";
import { Link } from "react-router-dom";
import { CircularProgress, Backdrop } from "@mui/material";
import { defaultValue } from "./PlanDefaultValue";

const PlanGenerate = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [isPlanning, setIsPlanning] = useState(true);
  const [isAiGenerate, setIsAiGenerate] = useState(true);

  const [planName, setPlanName] = useState("");
  const [planDetails, setPlanDetails] = useState(defaultValue);

  //ai generate
  const [selectedDaysCriteria, setSelectedDaysCriteria] = useState(0);
  const [selectedCategoriesCriteria, setSelectedCategoriesCriteria] = useState(
    []
  );
  const [selectedProvincesCriteria, setSelectedProvincesCriteria] =
    useState("");

  const [categoriesCriteria, setCategoriesCriteria] = useState([]);
  const [provincesCriteria, setProvincesCriteria] = useState([]);

  //ai generate - plan detail
  const [selectedDay, setSelectedDay] = useState(0);

  //plan be your self
  const [places, setPlaces] = useState([]);
  const [filteredPlaces, setFilteredPlaces] = useState([]);
  const [searchName, setSearchName] = useState("");
  const [categories, setCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [provinces, setProvinces] = useState([]);
  const [selectedProvinces, setSelectedProvinces] = useState([]);
  const navigate = useNavigate();

  const SavePlan = async () => {
    console.log("ðŸš€ ~ SavePlan ~ SavePlan: start");
    setLoading(true);
    try {
      const response = await CreatePlan(planDetails);
      console.log("ðŸš€ ~ SavePlan ~ response:", response);
      navigate(`/plans/${response.data?.id}`);
    } catch (err) {
      console.error("Error saving plan:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const categoriesCriteriaData = await getCategories();
        const provincesCriteriData = await getProvinces();

        setCategoriesCriteria(categoriesCriteriaData.data);
        setProvincesCriteria(provincesCriteriData.data);

        const placesData = await getPlaces();
        const provincesData = await getProvinces();
        const categoriesData = await getCategories();

        setPlaces(placesData.data);
        setFilteredPlaces(placesData.data);
        setProvinces(provincesData.data);
        setCategories(categoriesData.data);
      } catch (error) {
        setError("Error fetching data");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  //plan by your self
  // Handle filtering place when inputs change
  useEffect(() => {
    let filtered = places;

    if (searchName) {
      filtered = filtered.filter(
        (place) =>
          place.nameTh.toLowerCase().includes(searchName.toLowerCase()) ||
          place.nameEn.toLowerCase().includes(searchName.toLowerCase())
      );
    }

    if (selectedProvinces.length > 0) {
      const provinceNames = selectedProvinces.map((p) => p.value);
      filtered = filtered.filter((place) =>
        provinceNames.includes(place.province)
      );
    }

    if (selectedCategories.length > 0) {
      const categoryNames = selectedCategories.map((c) => c.value);
      filtered = filtered.filter((place) =>
        categoryNames.includes(place.category.id)
      );
    }

    setFilteredPlaces(filtered);
  }, [searchName, selectedProvinces, selectedCategories, places]);

  //get plan generated by AI
  const AiGenerate = async () => {
    // Set loading to true before the request
    setLoading(true);

    try {
      const categoryLabels = selectedCategoriesCriteria
        .map((category) => category.label)
        .join(", ");

      const response = await generatePlanByAi(
        selectedDaysCriteria,
        categoryLabels,
        selectedProvincesCriteria.label
      );
      
      const data = {
        name: planName,
        detail: response.data,
      };
      setPlanDetails(data);
    } catch (error) {
      console.error("Error generating plan:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-5 max-w-7xl mx-auto">
      {/* Full-screen Loading Spinner */}
      {loading && (
        <Backdrop
          open={loading}
          sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }}
        >
          <CircularProgress color="inherit" />
        </Backdrop>
      )}

      {/* toggle plan / summary */}
      <div className="flex flex-col items-center mt-4">
        <div className="flex w-60 bg-gray-200 rounded-xl p-1">
          <button
            className={`w-1/2 px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              isPlanning ? "bg-white font-semibold shadow-md" : "text-gray-700"
            }`}
            onClick={() => setIsPlanning(true)}
          >
            Plan
          </button>
          <button
            className={`w-1/2 px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              !isPlanning ? "bg-white font-semibold shadow-md" : "text-gray-700"
            }`}
            onClick={() => setIsPlanning(false)}
          >
            Summary
          </button>
        </div>
      </div>

      {isPlanning && (
        <div>
          <div className="mt-8">
            <input
              type="text"
              placeholder="Plan Name ..."
              value={planName}
              onChange={(e) => setPlanName(e.target.value)}
              className="mb-1 w-1/2 px-3 py-2 border-2 rounded-xl focus:outline-none focus:ring-1 focus:ring-black text-xl font-semibold"
            />
            <p className="text-gray-400 text-sm">
              {(() => {
                const date = new Date();
                const options = {
                  weekday: "short",
                  day: "2-digit",
                  month: "long",
                  year: "numeric",
                };
                const formattedDate = date
                  .toLocaleDateString("en-US", options)
                  .split(" ");
                return `${formattedDate[0]} ${formattedDate[2].replace(
                  ",",
                  ""
                )} ${formattedDate[1]} ${formattedDate[3]}`;
              })()}
            </p>
          </div>

          <div className="flex mt-4 gap-x-16">
            <div className="w-1/2 flex flex-col items-center">
              <div className="flex w-80 mb-4">
                <button
                  className={`w-1/2 px-4 py-2 text-sm font-semibold rounded-full transition-all ${
                    isAiGenerate ? "bg-gray-300" : "bg-white"
                  }`}
                  onClick={() => setIsAiGenerate(true)}
                >
                  Auto-generate plan
                </button>
                <button
                  className={`w-1/2 px-4 py-2 text-sm font-semibold rounded-full transition-all ${
                    !isAiGenerate ? "bg-gray-300" : "bg-white"
                  }`}
                  onClick={() => setIsAiGenerate(false)}
                >
                  Plan trip by yourself
                </button>
              </div>

              {isAiGenerate && (
                <div className="w-full">
                  <div className="flex flex-col text-left mb-3">
                    <label className="text-sm font-semibold text-gray-600 mb-1">
                      Days
                    </label>
                    <input
                      type="number"
                      value={selectedDaysCriteria}
                      onChange={(e) => {
                        const value = e.target.value;
                        if (value === "" || /^\d+$/.test(value)) {
                          setSelectedDaysCriteria(value);
                        }
                      }}
                      className="p-2 border-2 rounded-xl focus:outline-none focus:ring-1 focus:ring-black"
                      min="0"
                      step="1"
                    />
                  </div>
                  <div className="flex flex-col text-left mb-3">
                    <label className="text-sm font-semibold text-gray-600 mb-1">
                      Category
                    </label>
                    <Select
                      isMulti
                      options={categoriesCriteria.map((c) => ({
                        value: c.id,
                        label: c.name,
                      }))}
                      value={selectedCategoriesCriteria}
                      onChange={setSelectedCategoriesCriteria}
                      placeholder="Place Category"
                      styles={{
                        control: (base) => ({
                          ...base,
                          borderRadius: "0.75rem",
                        }),
                      }}
                    />
                  </div>
                  <div className="flex flex-col text-left mb-3">
                    <label className="text-sm font-semibold text-gray-600 mb-1">
                      Province
                    </label>
                    <Select
                      options={provincesCriteria.map((p) => ({
                        value: p,
                        label: p,
                      }))}
                      value={selectedProvincesCriteria}
                      onChange={setSelectedProvincesCriteria}
                      placeholder="Province"
                      styles={{
                        control: (base) => ({
                          ...base,
                          borderRadius: "0.75rem",
                        }),
                      }}
                    />
                  </div>
                  <div className="flex justify-center mt-8">
                    <button
                      onClick={AiGenerate}
                      className="w-40 bg-purple-400 text-white rounded-xl py-2 hover:bg-purple-500 hover:shadow-lg transition duration-300 ease-in-out"
                    >
                      Generate
                    </button>
                  </div>
                </div>
              )}

              {!isAiGenerate && (
                <div className="w-full flex flex-col items-center">
                  <div className="w-[400px] p-5 border-2 border-purple-400 rounded-xl">
                    <p className="font-semibold mb-3">Filter places:</p>
                    <input
                      type="text"
                      placeholder="Place Name ..."
                      value={searchName}
                      onChange={(e) => setSearchName(e.target.value)}
                      className="mb-3 w-full p-2 border-2 rounded-xl focus:outline-none focus:ring-1 focus:ring-black"
                    />
                    <Select
                      isMulti
                      options={categories.map((c) => ({
                        value: c.id,
                        label: c.name,
                      }))}
                      value={selectedCategories}
                      onChange={setSelectedCategories}
                      placeholder="Filter by Category"
                      className="mb-3"
                      styles={{
                        control: (base) => ({
                          ...base,
                          borderRadius: "0.75rem",
                        }),
                      }}
                    />
                    <Select
                      isMulti
                      options={provinces.map((p) => ({ value: p, label: p }))}
                      value={selectedProvinces}
                      onChange={setSelectedProvinces}
                      placeholder="Filter by Province"
                      styles={{
                        control: (base) => ({
                          ...base,
                          borderRadius: "0.75rem",
                        }),
                      }}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4 mt-10">
                    {filteredPlaces.length > 0 ? (
                      filteredPlaces.map((place) => (
                        <div
                          key={place.id}
                          className="w-full h-[250px] relative bg-white rounded-3xl shadow-lg aspect-square overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
                        >
                          <Link to={`/places/${place.id}`}>
                            <div className="h-[170px] relative">
                              <img
                                src={
                                  place.image
                                    ? place.image
                                    : "/default-mockup-place.jpg"
                                }
                                alt={place.nameEn}
                                className="w-full h-full object-cover"
                              />
                              <div className="absolute top-3 right-3 bg-purple-400 text-white text-xs font-semibold px-4 py-1 rounded-full">
                                {place.category.name}
                              </div>
                            </div>

                            <div className="h-[80px] bg-white px-5 py-2">
                              <p className="text-purple-400 font-semibold text-xs mb-1">
                                {place.province}
                              </p>
                              <p className="text-black font-semibold text-sm">
                                {place.nameTh}
                              </p>
                              <p className="text-black text-sm">
                                {place.nameEn}
                              </p>
                            </div>
                          </Link>
                        </div>
                      ))
                    ) : (
                      <p>No places found.</p>
                    )}
                  </div>
                </div>
              )}
            </div>
            <div className="w-1/2">
              {planDetails.detail && (
                <div>
                  {/* Day Tabs */}
                  <div className="flex overflow-x-auto mb-4">
                    {planDetails.detail?.trip.itinerary.map((dayPlan) => (
                      <button
                        onClick={() => {
                          setSelectedDay(parseInt(dayPlan.day) - 1);
                        }}
                        className={`px-4 py-2 mr-2 rounded-xl font-semibold focus:outline-none ${
                          selectedDay === parseInt(dayPlan.day) - 1
                            ? "bg-purple-400 text-white"
                            : "bg-gray-200 text-gray-800"
                        } transition duration-300 ease-in-out ${
                          selectedDay === parseInt(dayPlan.day) - 1
                            ? "hover:bg-purple-500"
                            : "hover:bg-gray-300"
                        }`}
                      >
                        {`Day ${dayPlan.day}`}
                      </button>
                    ))}
                  </div>

                  {/* Places Detail for the Selected Day */}
                  {planDetails.detail?.trip.itinerary[selectedDay]?.places ? (
                    planDetails.detail?.trip.itinerary[selectedDay].places.map(
                      (place, placeIndex) => (
                        <div key={placeIndex} className="relative mb-5">
                          <div className="flex items-center justify-between p-4 border border-gray-300 rounded-xl mb-2 relative bg-white shadow-lg">
                            <div className="flex items-center">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                                stroke="currentColor"
                                class="size-6"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                />
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
                                />
                              </svg>

                              <p className="ms-2 text-lg">{place.place_name}</p>
                            </div>

                            <div className="flex items-center">
                              <p className="text-sm mr-5">
                                {place.start_time} - {place.end_time}
                              </p>
                              <button className="text-red-500 hover:text-red-700">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  className="h-5 w-5"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                >
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      )
                    )
                  ) : (
                    <div className="text-gray-500">
                      No places available for this day
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {!isPlanning && (
        <div className="flex flex-col items-center mt-4">
          <div className="w-full">
            {planDetails.detail && (
              <div>
                {/* Day Tabs */}
                <div className="flex overflow-x-auto mb-4">
                  {planDetails.detail?.trip.itinerary.map((dayPlan) => (
                    <button
                      onClick={() => {
                        setSelectedDay(parseInt(dayPlan.day) - 1);
                      }}
                      className={`px-4 py-2 mr-2 rounded-xl font-semibold focus:outline-none ${
                        selectedDay === parseInt(dayPlan.day) - 1
                          ? "bg-purple-400 text-white"
                          : "bg-gray-200 text-gray-800"
                      } transition duration-300 ease-in-out ${
                        selectedDay === parseInt(dayPlan.day) - 1
                          ? "hover:bg-purple-500"
                          : "hover:bg-gray-300"
                      }`}
                    >
                      {`Day ${dayPlan.day}`}
                    </button>
                  ))}
                </div>

                {/* Places Detail for the Selected Day */}
                {planDetails.detail?.trip.itinerary[selectedDay]?.places ? (
                  planDetails.detail?.trip.itinerary[selectedDay].places.map(
                    (place, placeIndex) => (
                      <div key={placeIndex} className="relative mb-5">
                        <div className="flex items-center justify-between p-4 border border-gray-300 rounded-xl mb-2 relative bg-white shadow-lg">
                          <div className="flex items-center">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke-width="1.5"
                              stroke="currentColor"
                              class="size-6"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                              />
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
                              />
                            </svg>

                            <p className="ms-2 text-lg">{place.place_name}</p>
                          </div>

                          <div className="flex items-center">
                            <p className="text-sm mr-5">
                              {place.start_time} - {place.end_time}
                            </p>
                            <button className="text-red-500 hover:text-red-700">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M6 18L18 6M6 6l12 12"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    )
                  )
                ) : (
                  <div className="text-gray-500">
                    No places available for this day
                  </div>
                )}
              </div>
            )}
          </div>

          <button
            onClick={SavePlan}
            className={`px-4 py-2 mr-2 rounded-xl font-semibold text-white focus:outline-none bg-purple-400 transition duration-300 ease-in-out bg-purple-300 hover:bg-purple-500`}
          >
            Save
          </button>
        </div>
      )}
    </div>
  );
};

export default PlanGenerate;
